---
description: 
globs: 
alwaysApply: true
---
## 技術規格文件 (TSD) - 九宮格預覽 (Nine Box Preview) v3.7 (程式碼優化版)

**文件版本:** 1.12
**日期:** 2025-06-05
**變更摘要:** 
1. 清理冗餘程式碼，提高程式碼可讀性和維護性。
2. 優化除錯日誌系統，統一格式並確保只在除錯模式下輸出。
3. 重構模組導入，按功能分類整理並減少重複導入。
4. 簡化多個關鍵方法的邏輯結構，移除不必要的條件分支。
5. 改進方法文檔，為關鍵函數添加完整的參數和返回值說明。
6. 移除未使用的註解代碼和開發時的調試工具。
7. 修正子視窗層級行為，確保與主視窗一致的顯示邏輯。
8. 優化視窗資源管理，確保適當釋放和重建。
9. 優化鎖定輸入框清除行為：在鎖定模式下清除時不再重新隨機排列整個視窗，而是智能替換被清除的位置，保持其他位置不變。
10. 優化鎖頭切換行為：切換鎖頭模式時只更新有內容的輸入框對應的位置，避免全面重新排列。

### 1. 系統架構 (System Architecture)

本外掛採用集中式狀態管理，經過優化後架構更加清晰。`plugin.py` 作為核心控制器，負責狀態與邏輯。系統包含兩個主要視窗：

* **主預覽視窗 (`NineBoxPreviewWindow`):** 由 `window_controller.py` (主視窗控制器) 管理，負責顯示九宮格預覽。
* **控制面板子視窗 (`ControlsPanelWindow`):** 一個獨立的 `NSPanel`，用於放置所有控制項。其寬度固定，高度與主預覽視窗同步，且無標題列。此視窗的生命週期與顯示狀態由主視窗控制器管理。

UI 模組 (`controls_panel_view.py`) 負責控制面板的內容佈局與事件轉發。繪圖模組 (`preview_view.py`) 負責預覽渲染。輔助模組 (`utils.py` 和 `constants.py`) 提供全域常數和共用功能，確保程式碼重用和一致性。

**架構優化：**
* 將散落在各處的除錯日誌統一使用 `debug_log` 函數，並依賴全域 `DEBUG_MODE` 常數控制輸出。
* 透過函數職責分離和參數文檔改進，使每個模組的責任邊界更加清晰。
* 優化狀態管理流程，減少不必要的重繪和事件傳遞，提升效能。

### 2. 主要模組職責 (Module Responsibilities)

* **`plugin.py` (核心控制器 - 優化版):**
    * **職責:**
        * 維護所有核心狀態：`lastInput`, `selectedChars`, `lockedChars`, `currentArrangement`, `isLockModeActive`, `zoomFactor`。
        * 接收並處理所有來自 Glyphs 的回呼和來自控制面板子視窗的 UI 事件。
        * 使用結構化的模組導入 (`_import_modules`) 按功能分類整理依賴。
        * 實現優化後的 `updateInterface` 方法，避免重複更新，提升效能。
        * 實現簡化後的 `searchFieldCallback` 和 `smartLockCharacterCallback` 邏輯，提高可讀性。
        * 實現清晰明確的 `generateNewArrangement` 方法，處理字符排列生成。
        * 實現優化後的 `_get_lock_state` 和 `_recognize_character` 工具函式。
        * 優化偏好設定的載入和儲存機制，減少冗餘程式碼。

* **`window_controller.py` (主視窗控制器 - `NineBoxWindow`):**
    * **職責:** (功能不變，程式碼已優化)
        * 管理主預覽視窗 (`NSPanel`) 的生命週期、佈局、事件。
        * 管理控制面板子視窗的實例、生命週期、顯示與隱藏。
        * 監聽視窗尺寸變更事件，同步更新控制面板大小和位置。
        * 提供 `request_main_redraw()` 和 `request_controls_panel_ui_update()` 方法，統一重繪請求。

* **`preview_view.py` (繪圖器 - `NineBoxPreviewView`):**
    * **職責:** (功能不變，程式碼已優化)
        * 根據 `self.plugin.currentArrangement` 和 `Glyphs.font.selectedLayers[0]` 繪圖。
        * 自動檢測並適應 Glyphs 預覽區域的明暗主題。
        * 監聽主題變更通知，即時調整顯示風格。
        * 使用優化後的佈局計算邏輯，確保穩定的視覺效果。
        * 適當記錄關鍵繪製點的除錯資訊，便於追蹤問題。

* **`controls_panel_view.py` (`ControlsPanelView`):**
    * **職責:** (重構後)
        * 作為控制面板子視窗的 `contentView`，但現在是一個容器。
        * 管理兩個子面板：`SearchPanel` 和 `LockFieldsPanel`。
        * 負責整體佈局和子面板的協調。
        * 實現 `update_ui` 方法，將更新請求分發到各子面板。
        * 處理主題變更和背景繪製。

* **`search_panel.py` (`SearchPanel`):**
    * **職責:** (新增)
        * 管理長文本搜尋框的所有功能。
        * 包含 `SearchTextField` 類別，支援右鍵選單。
        * 處理搜尋文字變更事件，轉發給 `plugin.py` 的 `searchFieldCallback`。
        * 提供 `update_content`、`get_search_value` 和 `set_search_value` 方法。

* **`lock_fields_panel.py` (`LockFieldsPanel`):**
    * **職責:** (新增)
        * 管理鎖定輸入框九宮格和相關按鈕。
        * 包含 `LockCharacterField` 類別，處理單字符輸入。
        * 在九宮格中央放置鎖頭按鈕，控制鎖定模式。
        * 底部放置清空鎖定按鈕。
        * 處理鎖定字符輸入變更，轉發給 `plugin.py` 的 `smartLockCharacterCallback`。
        * 管理鎖頭狀態和同步邏輯。
        * **清除行為優化**：在鎖定模式下清除所有輸入框時：
          - 不會重新隨機排列整個主視窗
          - 只將被清除的鎖定位置替換為 `selectedChars` 中的隨機字符
          - 保持其他非鎖定位置的字符不變
          - 確保 `currentArrangement` 正確更新後再觸發重繪
        * **鎖頭切換優化**：切換鎖頭模式時的智能更新：
          - 解鎖狀態：生成新的隨機排列或清空排列
          - 上鎖狀態：只更新有鎖定內容的位置，保持其他位置不變
          - 實現 `_update_arrangement_for_lock_toggle` 方法處理特殊更新邏輯
          - 新增 `_get_current_editing_char` 輔助方法獲取當前編輯字符

* **`utils.py` (工具函數 - 優化版):**
    * **職責:**
        * 提供優化後的字符處理和排列生成函數。
        * 實現統一的除錯日誌系統 (`debug_log`, `log_to_macro_window`)。
        * 提供效率更高的快取管理功能 (`get_cached_glyph`, `get_cached_width`, `clear_cache`)。
        * 實現改進後的 `get_base_width` 函數，更可靠地獲取基準寬度。
        * 提供優化後的 `parse_input_text` 和 `generate_arrangement` 函數。
        * 實現修正後的 `apply_locked_chars` 函數，確保鎖定字符應用邏輯正確。

* **`constants.py` (常數定義 - 優化版):**
    * **職責:**
        * 提供所有外掛常數的集中定義。
        * 組織常數為多個邏輯區塊：偏好設定鍵值、視窗尺寸和佈局、繪圖參數等。
        * 移除開發時使用的測試代碼和註解。
        * 適當註釋重要常數的用途，提高程式碼可讀性。

### 3. 數據流 (Data Flow)

優化後的數據流程更加清晰和高效：

1.  **事件觸發 (UI):** `ControlsPanelView` 中的 UI 元素產生事件 -> 轉發給 `plugin.py` 的處理函數。
2.  **狀態更新:** `plugin.py` 更新內部狀態，使用優化後的條件檢查避免不必要的處理。
3.  **排列計算:** `plugin.py` 使用優化後的 `generateNewArrangement` 方法計算字符排列。
4.  **請求更新:** 
    * 呼叫主視窗控制器的 `request_main_redraw()` -> `preview_view` 重繪。
    * 必要時呼叫主視窗控制器的 `request_controls_panel_ui_update()` -> `ControlsPanelView` 更新 UI。
    * 儲存偏好設定。
5.  **效能控制:** 使用 `_update_scheduled` 標記防止重複更新，優化資源使用。

### 4. 關鍵資料結構 (Key Data Structures)

* `plugin.lastInput (str)`: 搜尋欄位的輸入內容。
* `plugin.selectedChars (list)`: 解析後的有效字符列表。
* `plugin.lockedChars (dict)`: 鎖定字符字典，鍵為位置 (0-7)，值為字符或 Nice Name。
* `plugin.currentArrangement (list)`: 當前周圍 8 格的字符排列。
* `plugin.zoomFactor (float)`: 縮放係數。
* `plugin.isControlsPanelVisible (bool)`: 追蹤控制面板子視窗的顯示狀態。
* `plugin.previousLockedChars (dict)`: 備份的鎖定字符，用於還原功能。
* `plugin._update_scheduled (bool)`: 優化新增，防止重複更新的標記。

### 5. 視窗管理細節 (Window Management Details)

* **控制面板創建與管理:**
    * 使用 `NSPanel` 實例，設定適當的 `styleMask` 移除標題列。
    * 設定 `level` 為 `NSFloatingWindowLevel`，並使用 `orderBack_()` 確保控制面板顯示在主視窗之下。
    * 使用 `CONTROLS_PANEL_SPACING` 常數設定控制面板與主視窗間距，避免視覺干擾。
    * 確保 `canBecomeKeyWindow` 為 `True`，允許控制面板接受鍵盤輸入。
    * 優化視窗資源管理，確保在關閉主視窗時正確釋放控制面板資源。

* **視窗關閉與重新開啟 (優化流程):**
    * 當主視窗關閉時，完整釋放控制面板資源。
    * 當主視窗重新開啟時，檢查並在需要時重新創建控制面板。
    * 所有相關方法都進行適當檢查，確保視窗狀態一致性。

### 6. 即時更新機制 (Real-time Update Mechanism)

* **初次開啟視窗:**
    * 創建預覽視圖後立即設置正確框架並觸發初始重繪。
    * 確保視窗初次顯示時預覽內容立即可見。

* **視窗尺寸變更:**
    * 調整預覽畫面大小後立即觸發重繪。
    * 確保尺寸變更時預覽畫面即時反映新的佈局。

* **控制面板同步更新:**
    * 狀態改變時，根據需要選擇性地更新控制面板 UI。
    * 改進更新邏輯，避免不必要的輸入框刷新，保留用戶輸入。

* **更新優化:**
    * 使用 `_update_scheduled` 標記防止短時間內的重複更新請求。
    * 選擇性更新，例如搜尋欄位變更時不更新鎖定輸入框，避免干擾用戶輸入。
    * 區分輕量級更新和完整更新，提高響應速度。

### 7. 持久化 (Persistence)

* **偏好設定管理 (優化版):**
    * 集中在 `savePreferences` 和 `loadPreferences` 方法中處理所有持久化邏輯。
    * 優化鎖定字符的儲存和載入，確保在不同字型間切換時的正確行為。
    * 改進控制面板可見性設定的處理，同時維持向後相容性。

### 8. 主題自動適應機制 (Theme Auto-Adaptation Mechanism)

* **主題檢測與切換:**
    * 檢測 Glyphs 預覽區域的主題狀態。
    * 監聽主題變更通知，及時調整顯示風格。
    * 優化通知觀察者的管理，避免記憶體洩漏。

### 9. 程式碼效能與維護性改進

* **除錯系統優化:**
    * 統一使用 `debug_log` 函數，受 `DEBUG_MODE` 常數控制。
    * 移除冗餘的除錯訊息，保留關鍵點的日誌。
    * 在關鍵功能處增加具體的錯誤處理和日誌。

* **效能優化:**
    * 使用快取減少重複計算和查詢。
    * 優化字符排列生成邏輯，減少不必要的操作。
    * 實現批次更新機制，避免短時間內的重複重繪。

* **代碼可讀性:**
    * 為主要函數添加詳細文檔字符串，明確參數和返回值。
    * 重構複雜的條件判斷，使邏輯更加清晰。
    * 統一命名風格和程式碼格式。

* **錯誤處理:**
    * 完善異常捕獲和處理，避免程式崩潰。
    * 在關鍵功能處增加參數檢查和預設值處理。
    * 優化視窗生命週期管理，確保資源正確釋放。
